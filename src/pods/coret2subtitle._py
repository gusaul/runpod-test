from moviepy.editor import VideoFileClip
from moviepy.video.tools.subtitles import SubtitlesClip

video = VideoFileClip("final_video.mp4")

subtitles = SubtitlesClip("output.srt", lambda txt: TextClip(txt, fontsize=24, color='white'))
video = CompositeVideoClip([video, subtitles.set_position(("center", "bottom"))])

video.write_videofile("video_with_subtitles.mp4")



import pysrt
from moviepy.editor import VideoFileClip, TextClip, CompositeVideoClip


def parse_srt(srt_file):
    """
    Parses an SRT file and extracts subtitle text along with timestamps.

    Args:
        srt_file (str): Path to the .srt file.

    Returns:
        list of dict: Each entry contains 'text', 'start', and 'duration'.
    """
    subs = pysrt.open(srt_file)
    text_data = []

    for sub in subs:
        start_sec = sub.start.hours * 3600 + sub.start.minutes * 60 + sub.start.seconds + sub.start.milliseconds / 1000
        end_sec = sub.end.hours * 3600 + sub.end.minutes * 60 + sub.end.seconds + sub.end.milliseconds / 1000
        duration = end_sec - start_sec

        text_data.append({"text": sub.text.replace("\n", " "), "start": start_sec, "duration": duration})

    return text_data


def create_highlighted_text_clips(video, text_data):
    """
    Creates a list of animated text clips with highlighting effects.

    Args:
        video (VideoFileClip): The video file.
        text_data (list of dict): Subtitle data with text and timestamps.

    Returns:
        List of MoviePy TextClip objects.
    """
    text_clips = []
    
    for item in text_data:
        word = item["text"]
        start_time = item["start"]
        duration = item["duration"]

        # Normal text
        normal_text = TextClip(word, fontsize=60, color='white', stroke_color='black', stroke_width=3)
        normal_text = normal_text.set_position(("center", "bottom")).set_duration(duration).set_start(start_time)

        # Highlighted text (larger and yellow)
        highlighted_text = TextClip(word, fontsize=80, color='yellow', stroke_color='black', stroke_width=5)
        highlighted_text = highlighted_text.set_position(("center", "bottom")).set_duration(0.3).set_start(start_time)

        text_clips.extend([highlighted_text, normal_text])

    return text_clips


def add_highlighted_text(video_path, srt_path, output_path):
    """
    Adds animated overlay text with highlight effects using an SRT file.

    Args:
        video_path (str): Input video file.
        srt_path (str): Subtitle file (.srt).
        output_path (str): Output video file with animated text.
    """
    video = VideoFileClip(video_path)
    text_data = parse_srt(srt_path)
    text_clips = create_highlighted_text_clips(video, text_data)

    final = CompositeVideoClip([video] + text_clips)
    final.write_videofile(output_path, fps=30, codec="libx264")


# Example Usage
video_file = "input.mp4"
srt_file = "subtitles.srt"
output_file = "output_with_subtitles.mp4"

add_highlighted_text(video_file, srt_file, output_file)